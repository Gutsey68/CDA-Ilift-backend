version: '3.8'

services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    command:
      - '--api.dashboard=true'
      - '--providers.docker=true'
      - '--entrypoints.web.address=:80'
      - '--entrypoints.websecure.address=:443'
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - proxy

  frontend:
    build:
      context: ./frontend
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt:ro
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.frontend.rule=Host(`segau.dipsw-ccicampus.dev`)'
      - 'traefik.http.routers.frontend.tls=true'
      - 'traefik.http.services.frontend.loadbalancer.server.port=80'
    networks:
      - proxy
      - internal

  backend:
    build:
      context: ./backend
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - PORT=${PORT}
      - NODE_ENV=${NODE_ENV}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
      - REFRESH_TOKEN_EXPIRES_IN=${REFRESH_TOKEN_EXPIRES_IN}
      - CLIENT_URL=${CLIENT_URL}
      - UPLOAD_DIR=${UPLOAD_DIR}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE}
      - RESEND_API_KEY=${RESEND_API_KEY}
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.backend.rule=Host(`segau.dipsw-ccicampus.dev`) && (PathPrefix(`/api`) || PathPrefix(`/uploads`))'
      - 'traefik.http.services.backend.loadbalancer.server.port=4000'
    networks:
      - proxy
      - internal
    depends_on:
      - db
    volumes:
      - ./backend/uploads:/app/uploads

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/data.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - internal

networks:
  proxy:
    driver: bridge
  internal:
    driver: bridge

volumes:
  postgres_data: