// Configuration du générateur et de la source de données
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modèle principal utilisateur
/// Représente un utilisateur de l'application
model User {
  id                    String   @id @default(cuid())
  pseudo                String   @unique
  email                 String   @unique
  passwordHash          String
  bio                   String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  profilePhoto          String?
  roleId                String?
  cityId                String?
  isBan                 Boolean @default(false)
  onboardingStep        Int      @default(0)
  isOnboardingCompleted Boolean  @default(false)
  exercicesResults      ExerciceResults[]
  refreshtokens                RefreshToken[]

  followedBy            Follows[] @relation("followedBy")
  following             Follows[] @relation("following")
  comments              UsersComments[]
  likes                 UsersLikes[]
  shares                UsersShares[]
  passwordResets        PasswordReset[]
  posts                 Posts[]
  programs              Programs[]
  workouts              Workouts[]
  role                  Role? @relation(fields: [roleId], references: [id])
  city                  City? @relation(fields: [cityId], references: [id])
  programsFollowed      UsersProgramsFollows[]
  receivedNotifications Notifications[] @relation("receivedNotifications")
  sentNotifications     Notifications[] @relation("sentNotifications")
}

// Modèles liés aux publications
/// Représente une publication dans le flux d'activité
model Posts {
  id                    String   @id @default(cuid())
  photo                 String?
  content               String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  isValid               Boolean @default(true)


  comments              UsersComments[]
  shares                UsersShares[]
  likes                 UsersLikes[]
  author                User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId              String
  exercicesResultsPosts ExercicesResultsPosts[]
  tags                  TagsPosts[]
}

// Modèles géographiques
/// Représente une ville
model City {
  id          String   @id @default(cuid())
  name        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  users        User[]
}

// Modèles d'entraînement
/// Programme d'entraînement personnalisé
model Programs {
  id            String   @id @default(cuid())
  name          String
  description   String?
  position      Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  authorId      String

  author        User @relation(fields: [authorId], references: [id])
  workouts      Workouts[]
  usersFollows  UsersProgramsFollows[]
}

/// Séance d'entraînement dans un programme
model Workouts {
  id           String   @id @default(cuid())
  name         String
  position     Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  programId    String
  userId       String

  user         User @relation(fields: [userId], references: [id])
  program      Programs @relation(fields: [programId], references: [id])
  exercices    WorkoutsExercises[]
}

/// Exercice physique
model Exercices {
  id                String   @id @default(cuid())
  name              String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  position          Int      @default(0)

  workouts          WorkoutsExercises[]
  results           ExerciceResults[]
  musclesGroups     ExerciceMuscleGroups[]
}

/// Résultat d'un exercice
model ExerciceResults {
  id                    String   @id @default(cuid())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  exerciceId            String
  exercicesResultsPosts ExercicesResultsPosts[]
  userId                String
  sets                  Sets[]

  user                  User @relation(fields: [userId], references: [id])
  exercice              Exercices @relation(fields: [exerciceId], references: [id])
}

/// Groupe musculaire
model MuscleGroups {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  name              String

  exercices         ExerciceMuscleGroups[]
}

// Modèles d'interactions sociales
/// Likes sur les publications
model UsersLikes {
  posts        Posts    @relation(fields: [postsId], references: [id], onDelete: Cascade)
  postsId      String
  users        User     @relation(fields: [usersId], references: [id])
  usersId      String
  createdAt    DateTime @default(now())

  @@id([postsId, usersId])
}

/// Partages de publications
model UsersShares {
  posts        Posts    @relation(fields: [postsId], references: [id], onDelete: Cascade)
  postsId      String
  users        User     @relation(fields: [usersId], references: [id])
  usersId      String
  createdAt    DateTime @default(now())

  @@id([postsId, usersId])
}

/// Commentaires sur les publications
model UsersComments {
  posts        Posts    @relation(fields: [postsId], references: [id], onDelete: Cascade)
  postsId      String
  users        User     @relation(fields: [usersId], references: [id])
  usersId      String
  content      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@id([postsId, usersId])
}

// Modèles de relations
/// Association entre exercices et groupes musculaires
model ExerciceMuscleGroups {
  exercices         Exercices            @relation(fields: [exercicesId], references: [id])
  exercicesId       String
  muscleGroups      MuscleGroups         @relation(fields: [musculeGroupsId], references: [id])
  musculeGroupsId   String
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt

  @@id([musculeGroupsId, exercicesId])
}

/// Association entre séances et exercices
model WorkoutsExercises {
  workoutId    String
  workout      Workouts @relation(fields: [workoutId], references: [id])
  exerciceId   String
  exercice     Exercices @relation(fields: [exerciceId], references: [id])
  position     Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  @@id([exerciceId, workoutId])
}

/// Abonnements aux programmes
model UsersProgramsFollows {
  programId    String
  program      Programs     @relation(fields: [programId], references: [id])
  userId       String
  user         User         @relation(fields: [userId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())

  @@id([programId, userId])
}

// Modèles de gestion et sécurité
/// Rôle utilisateur pour les permissions
model Role {
  id           String   @id @default(cuid())
  name         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  users        User[]
}

/// Association entre résultats d'exercices et publications
model ExercicesResultsPosts {
  posts                 Posts    @relation(fields: [postsId], references: [id], onDelete: Cascade)
  postsId               String
  exercicesResults      ExerciceResults @relation(fields: [exercicesResultsId], references: [id], onDelete: Cascade)
  exercicesResultsId    String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now())

  @@id([exercicesResultsId, postsId])
}

/// Relations d'abonnement entre utilisateurs
model Follows {
  followedBy   User @relation("followedBy", fields: [followedById], references: [id])
  followedById String
  following    User @relation("following", fields: [followingId], references: [id])
  followingId  String

  @@id([followingId, followedById])
}

/// Notifications utilisateur
model Notifications {
  id             String   @id @default(cuid())
  userId         String   
  senderId       String 
  type           String   
  content        String   
  isRead         Boolean  @default(false) 
  createdAt      DateTime @default(now())

  user           User     @relation("receivedNotifications", fields: [userId], references: [id])
  sender         User     @relation("sentNotifications", fields: [senderId], references: [id])
}

/// Séries d'exercices
model Sets {
  id               String   @id @default(cuid())
  reps             Int
  weight           Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  exerciceResultId String

  exerciceResult   ExerciceResults @relation(fields: [exerciceResultId], references: [id], onDelete: Cascade)
}

/// Tags pour les publications
model Tags {
  id        String      @id @default(cuid())
  name      String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  posts     TagsPosts[]
}

/// Association entre tags et publications
model TagsPosts {
  postId    String
  post      Posts @relation(fields: [postId], references: [id], onDelete: Cascade)
  tagId     String
  tag       Tags @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@id([postId, tagId]) 
}

/// Tokens de rafraîchissement pour l'authentification
model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String
  isValid   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user      User @relation(fields: [userId], references: [id])
}

/// Tokens de réinitialisation de mot de passe
model PasswordReset {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}